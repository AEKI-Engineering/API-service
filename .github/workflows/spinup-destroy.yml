name: Configure Azure environment
 
on:
 pull_request:
   types: [labeled]
 
env:
 IMAGE_REGISTRY_URL: aekiengineering.azurecr.io
 AZURE_RESOURCE_GROUP: aeki-with-actions
 AZURE_APP_PLAN: aeki-api-service-deployment
 AZURE_LOCATION: '"Central US"'
 AZURE_WEBAPP_NAME: aeki-api-service
 DOCKER_IMAGE_NAME: aeki-api-service-azure
 PYTHON_VERSION: '3.10' 
 WORKING_DIRECTORY: '.'
 STARTUP_COMMAND: ''
 REPOSITORY_NAME: 'aeki-engineering/api-service'
 
jobs:
 setup-up-azure-resources:
   runs-on: ubuntu-latest
 
   if: contains(github.event.pull_request.labels.*.name, 'spin up environment')
 
   steps:
     - name: Checkout repository
       uses: actions/checkout@v2
       
     - name: Azure login
       uses: azure/login@v1
       with:
         creds: ${{ secrets.AZURE_CONTAINER_CREDENTIALS }}
         
     - uses: azure/docker-login@v1
       with:
          login-server: ${{env.IMAGE_REGISTRY_URL}}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
          
     - name: Create Azure resource group
       if: success()
       run: |
         az group create --location ${{env.AZURE_LOCATION}} --name ${{env.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
 
     - name: Create Azure app service plan
       if: success()
       run: |
         az appservice plan create --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{env.AZURE_APP_PLAN}} --is-linux --sku F1 --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
 
     - name: Create webapp resource
       if: success()
       run: |
         az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --plan ${{ env.AZURE_APP_PLAN }} --name ${{ env.AZURE_WEBAPP_NAME }}  --deployment-container-image-name nginx --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

     - name: Configure webapp to use GHCR
       if: success()
       run: |
         az webapp config container set --docker-custom-image-name nginx --docker-registry-server-password ${{secrets.CR_PAT}} --docker-registry-server-url https://${{env.IMAGE_REGISTRY_URL}} --docker-registry-server-user ${{github.actor}} --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}

     - uses: azure/appservice-settings@v1
       with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        mask-inputs: false
        general-settings-json: '{"linuxFxVersion": "PYTHON|${{ env.PYTHON_VERSION }}"}' #'General configuration settings as Key Value pairs'
        app-settings-json: |
         [
             {
                 "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
                 "value": "${{ secrets.REGISTRY_PASSWORD }}",
                 "slotSetting": false
             },
             {
                 "name": "DOCKER_REGISTRY_SERVER_URL",
                 "value": "https://contoso.azurecr.io",
                 "slotSetting": false
             },
             {
                 "name": "DOCKER_REGISTRY_SERVER_USERNAME",
                 "value": "${{ secrets.REGISTRY_USERNAME  }}",
                 "slotSetting": false
             }
         ]

     - name: Deploy web app container
       uses: azure/webapps-deploy@v2
       with:
          app-name: ${{env.AZURE_WEBAPP_NAME}}
          package: ${{ env.WORKING_DIRECTORY }}
          images: ${{env.IMAGE_REGISTRY_URL}}/${{ env.REPOSITORY_NAME }}/${{env.DOCKER_IMAGE_NAME}}:${{ github.sha }}
          startup-command: ${{ env.STARTUP_COMMAND }}

     - name: Azure logout
       run: |
         az logout
 
#      - name: Create Azure resource group
#        if: success()
#        run: |
#          az group create --location ${{env.AZURE_LOCATION}} --name ${{env.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
 
#      - name: Create Azure app service plan
#        if: success()
#        run: |
#          az appservice plan create --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{env.AZURE_APP_PLAN}} --is-linux --sku F1 --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
 
#      - name: Create webapp resource
#        if: success()
#        run: |
#          az webapp create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --plan ${{ env.AZURE_APP_PLAN }} --name ${{ env.AZURE_WEBAPP_NAME }}  --deployment-container-image-name nginx --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
 
#      - name: Configure webapp to use GHCR
#        if: success()
#        run: |
#          az webapp config container set --docker-custom-image-name nginx --docker-registry-server-password ${{secrets.CR_PAT}} --docker-registry-server-url https://${{env.IMAGE_REGISTRY_URL}} --docker-registry-server-user ${{github.actor}} --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
 
 destroy-azure-resources:
   runs-on: ubuntu-latest
 
   if: contains(github.event.pull_request.labels.*.name, 'destroy environment')
 
   steps:
     - name: Checkout repository
       uses: actions/checkout@v2
 
     - name: Azure login
       uses: azure/login@v1
       with:
         creds: ${{ secrets.AZURE_CREDENTIALS }}
 
     - name: Destroy Azure environment
       if: success()
       run: |
         az group delete --name ${{env.AZURE_RESOURCE_GROUP}} --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --yes
